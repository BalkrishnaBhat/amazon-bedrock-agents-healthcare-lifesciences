AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Clinical Study Search Agent and its components'

Parameters:
  AgentName:
    Type: String
    Default: Clinical-Study-Search-Agent
    Description: Name of the Bedrock agent
  
  AgentDescription:
    Type: String
    Default: Clinical-Study-Search-Agent that helps users explore, filter, and analyze clinical trial data
    Description: Description of the Bedrock agent
  
  ChartImageBucketName:
    Type: String
    Default: lss-agent-images
    Description: S3 bucket name for storing chart images

Resources:
  # S3 Bucket for chart images
  ChartImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ChartImageBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for Bedrock Agent
  BedrockAgentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub AmazonBedrockExecutionRoleForAgents_${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AmazonBedrockAgentBedrockFoundationModelPolicyProd
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*
      Path: /service-role/
      ManagedPolicyArns:
        - !Ref BedrockAgentFoundationModelPolicy

  # IAM Policy for Bedrock Agent to invoke foundation models
  BedrockAgentFoundationModelPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub AmazonBedrockAgentBedrockFoundationModelPolicy_${AWS::StackName}
      Path: /service-role/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AmazonBedrockAgentBedrockFoundationModelPolicyProd
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource:
              - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0

  # IAM Role for Clinical Study Search Lambda
  ClinicalStudySearchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ClinicalStudySearchLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # IAM Role for Clinical Visualizer Lambda
  ClinicalVisualizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ClinicalVisualizerLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ChartImageBucketName}/*

  # IAM Role for Drug Information Lambda
  DrugInformationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DrugInformationLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda Layer for Matplotlib
  MatplotlibLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: matplotliblayer
      Description: Layer containing matplotlib and dependencies
      CompatibleRuntimes:
        - python3.11
      Content:
        S3Bucket: !Ref 'AWS::NoValue'  # You'll need to provide this or use a different method to create the layer
        S3Key: !Ref 'AWS::NoValue'      # You'll need to provide this or use a different method to create the layer

  # Lambda Layer for AWS SDK Pandas
  AwsSdkPandasLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: awssdkpandas
      Description: Layer containing AWS SDK and pandas
      CompatibleRuntimes:
        - python3.12
      Content:
        S3Bucket: !Ref 'AWS::NoValue'  # You'll need to provide this or use a different method to create the layer
        S3Key: !Ref 'AWS::NoValue'      # You'll need to provide this or use a different method to create the layer

  # Lambda Function for Clinical Study Search
  ClinicalStudySearchLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-clinical-study-search
      Handler: dummy_lambda.lambda_handler
      Role: !GetAtt ClinicalStudySearchLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import random

          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")
              
              # Extract the action name and parameters
              action = event.get('actionGroup')
              api_path = event.get('apiPath')
              parameters = event.get('parameters', [])
              
              # Convert parameters list to dictionary
              params = {}
              for param in parameters:
                  params[param['name']] = param['value']
              
              # Handle search_trials action
              if api_path == 'search_trials':
                  condition = params.get('condition', '')
                  intervention = params.get('intervention', '')
                  outcome = params.get('outcome', '')
                  comparison = params.get('comparison', '')
                  
                  # Mock response with sample clinical trials
                  trials = [
                      {
                          "nctId": "NCT04000165",
                          "title": f"Study of {intervention} for {condition}",
                          "status": "Recruiting",
                          "phase": "Phase 2",
                          "enrollment": 120,
                          "primaryOutcome": outcome,
                          "sponsor": "Sample Pharma Inc."
                      },
                      {
                          "nctId": "NCT04123456",
                          "title": f"Randomized Trial of {intervention} vs {comparison} in {condition}",
                          "status": "Active, not recruiting",
                          "phase": "Phase 3",
                          "enrollment": 350,
                          "primaryOutcome": outcome,
                          "sponsor": "University Medical Center"
                      }
                  ]
                  
                  return {
                      "messageVersion": "1.0",
                      "response": {
                          "trials": trials,
                          "totalCount": len(trials)
                      }
                  }
              
              # Handle get_trial_details action
              elif api_path == 'get_trial_details':
                  nct_id = params.get('nctId', '')
                  
                  # Mock detailed trial information
                  trial_details = {
                      "nctId": nct_id,
                      "title": "Sample Clinical Trial",
                      "status": "Recruiting",
                      "phase": "Phase 2",
                      "enrollment": 120,
                      "startDate": "2023-01-15",
                      "completionDate": "2025-06-30",
                      "primaryOutcome": "Change in HbA1c from baseline",
                      "secondaryOutcomes": [
                          "Percentage of patients achieving HbA1c <7%",
                          "Change in fasting plasma glucose"
                      ],
                      "eligibilityCriteria": {
                          "inclusion": [
                              "Adults aged 18-75 years",
                              "Diagnosed with condition for at least 6 months"
                          ],
                          "exclusion": [
                              "History of cardiovascular disease",
                              "Pregnant or nursing women"
                          ]
                      },
                      "locations": [
                          {
                              "facility": "University Hospital",
                              "city": "Boston",
                              "state": "MA",
                              "country": "United States"
                          }
                      ]
                  }
                  
                  return {
                      "messageVersion": "1.0",
                      "response": trial_details
                  }
              
              # Default response for unknown actions
              return {
                  "messageVersion": "1.0",
                  "response": {
                      "error": "Unknown action or API path"
                  }
              }
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Layers:
        - !Ref AwsSdkPandasLayer
      LoggingConfig:
        LogFormat: Text
        LogGroup: !Sub /aws/lambda/${AWS::StackName}-clinical-study-search

  # Lambda Function for Clinical Visualizer
  ClinicalVisualizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-clinical-visualizer
      Handler: dummy_lambda.lambda_handler
      Role: !GetAtt ClinicalVisualizerLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import os
          import uuid
          import boto3
          import matplotlib.pyplot as plt
          import io
          import base64

          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")
              
              # Extract the action name and parameters
              action = event.get('actionGroup')
              api_path = event.get('apiPath')
              parameters = event.get('parameters', [])
              
              # Convert parameters list to dictionary
              params = {}
              for param in parameters:
                  params[param['name']] = param['value']
              
              # Handle create_pie_chart action
              if api_path == 'create_pie_chart':
                  title = params.get('title', 'Pie Chart')
                  data = params.get('data', [])
                  
                  # Create a simple pie chart
                  labels = [item.get('label', f'Item {i}') for i, item in enumerate(data)]
                  values = [item.get('value', 1) for item in data]
                  
                  plt.figure(figsize=(10, 6))
                  plt.pie(values, labels=labels, autopct='%1.1f%%')
                  plt.title(title)
                  
                  # Save to a buffer
                  buf = io.BytesIO()
                  plt.savefig(buf, format='png')
                  buf.seek(0)
                  
                  # Upload to S3
                  s3_client = boto3.client('s3')
                  bucket_name = os.environ.get('CHART_IMAGE_BUCKET')
                  file_name = f"{uuid.uuid4()}.png"
                  s3_path = f"charts/{file_name}"
                  
                  s3_client.put_object(
                      Bucket=bucket_name,
                      Key=s3_path,
                      Body=buf,
                      ContentType='image/png'
                  )
                  
                  # Generate a pre-signed URL for the image
                  url = s3_client.generate_presigned_url(
                      'get_object',
                      Params={'Bucket': bucket_name, 'Key': s3_path},
                      ExpiresIn=3600
                  )
                  
                  return {
                      "messageVersion": "1.0",
                      "response": {
                          "chartUrl": url,
                          "chartTitle": title
                      }
                  }
              
              # Default response for unknown actions
              return {
                  "messageVersion": "1.0",
                  "response": {
                      "error": "Unknown action or API path"
                  }
              }
      Runtime: python3.11
      Timeout: 30
      MemorySize: 2048
      Environment:
        Variables:
          CHART_IMAGE_BUCKET: !Ref ChartImageBucketName
      Layers:
        - !Ref MatplotlibLayer
      LoggingConfig:
        LogFormat: Text
        LogGroup: !Sub /aws/lambda/${AWS::StackName}-clinical-visualizer
      EphemeralStorage:
        Size: 10240

  # Lambda Function for Drug Information
  DrugInformationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-drug-information
      Handler: dummy_lambda.lambda_handler
      Role: !GetAtt DrugInformationLambdaRole.Arn
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")
              
              # Extract the action name and parameters
              action = event.get('actionGroup')
              api_path = event.get('apiPath')
              parameters = event.get('parameters', [])
              
              # Convert parameters list to dictionary
              params = {}
              for param in parameters:
                  params[param['name']] = param['value']
              
              # Handle get_approved_drugs action
              if api_path == 'get_approved_drugs':
                  condition = params.get('condition', '')
                  route = params.get('route', '')
                  
                  # Filter logic would go here in a real implementation
                  # For now, return mock data
                  
                  # Mock response with sample approved drugs
                  drugs = [
                      {
                          "name": "Drug A",
                          "activeIngredient": "Compound X",
                          "approvalDate": "2020-05-15",
                          "route": route if route else "Oral",
                          "indication": condition
                      },
                      {
                          "name": "Drug B",
                          "activeIngredient": "Compound Y",
                          "approvalDate": "2021-08-22",
                          "route": route if route else "Injection",
                          "indication": condition
                      }
                  ]
                  
                  return {
                      "messageVersion": "1.0",
                      "response": {
                          "drugs": drugs,
                          "totalCount": len(drugs)
                      }
                  }
              
              # Default response for unknown actions
              return {
                  "messageVersion": "1.0",
                  "response": {
                      "error": "Unknown action or API path"
                  }
              }
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Layers:
        - !Ref AwsSdkPandasLayer
      LoggingConfig:
        LogFormat: Text
        LogGroup: !Sub /aws/lambda/${AWS::StackName}-drug-information

  # Bedrock Agent
  ClinicalStudySearchAgent:
    Type: AWS::Bedrock::Agent
    DependsOn:
      - BedrockAgentExecutionRole
    Properties:
      AgentName: !Ref AgentName
      AgentResourceRoleArn: !GetAtt BedrockAgentExecutionRole.Arn
      Description: !Ref AgentDescription
      FoundationModel: anthropic.claude-3-5-sonnet-20240620-v1:0
      Instruction: >
        You are a Clinical Study Search Agent that helps users explore, filter, and analyze clinical trial data from public registries like ClinicalTrials.gov. 
        You assist with condition-specific study identification, intervention tracking, sponsor profiling, and outcome analysis using structured search criteria.

        You accept both structured inputs (e.g., condition, intervention, outcome) and natural language queries (e.g., "Find double-arm diabetes trials in males under 60") 
        and convert them into valid API queries using the ClinicalTrials.gov v2 syntax.
      IdleSessionTTLInSeconds: 600

  # Bedrock Agent Action Group - Clinical Study Search
  ClinicalStudySearchActionGroup:
    Type: AWS::Bedrock::AgentActionGroup
    DependsOn:
      - ClinicalStudySearchAgent
      - ClinicalStudySearchLambda
    Properties:
      AgentId: !Ref ClinicalStudySearchAgent
      ActionGroupName: clinical-study-search-action-group
      ActionGroupState: ENABLED
      ActionGroupExecutor:
        Lambda: !GetAtt ClinicalStudySearchLambda.Arn
      FunctionSchema:
        Functions:
          - Name: search_trials
            Description: >
              Finds clinical studies that match certain criteria — like who the study is about, what treatment is being tested, 
              what it's being compared to, and what results are being measured. It pulls together all the matching studies and gives you a clear, focused list.
            Parameters:
              sponsor:
                Type: string
                Description: Organization or entity funding or collaborating on the trial (e.g., "NIH", "Pfizer").
                Required: false
              condition:
                Type: string
                Description: Disease or medical condition being studied (e.g., "diabetes", "asthma").
                Required: true
              comparison:
                Type: string
                Description: Alternate treatment or control used as a comparator (e.g., "placebo", "standard of care").
                Required: true
              patient:
                Type: string
                Description: Free-text block describing eligible patient characteristics or population (e.g., "males up to 60 years old").
                Required: false
              location:
                Type: string
                Description: Geographic location of the study, such as city, country, or region (e.g., "United States", "Europe").
                Required: false
              study_id:
                Type: string
                Description: Clinical trial identifier (e.g., NCT number or other registry ID like "NCT056789").
                Required: false
              title:
                Type: string
                Description: Words or phrases appearing in the trial title or acronym (e.g., "GLP-1 nasal spray").
                Required: false
              intervention:
                Type: string
                Description: Name or type of treatment/drug/device/intervention used in the study (e.g., "metformin", "placebo", "injection").
                Required: true
              outcome:
                Type: string
                Description: Specific clinical outcome or endpoint being measured (e.g., "blood glucose", "HbA1c reduction").
                Required: true
          - Name: get_trial_details
            Description: >
              Retrieves comprehensive information about a specific clinical trial using its NCT ID (e.g., NCT04000165) from the ClinicalTrials.gov API.
            Parameters:
              nctId:
                Type: string
                Description: Id of the specific clinical study
                Required: true

  # Bedrock Agent Action Group - Clinical Visualizer
  ClinicalVisualizerActionGroup:
    Type: AWS::Bedrock::AgentActionGroup
    DependsOn:
      - ClinicalStudySearchAgent
      - ClinicalVisualizerLambda
    Properties:
      AgentId: !Ref ClinicalStudySearchAgent
      ActionGroupName: clinical_visualizer_action_group
      ActionGroupState: ENABLED
      ActionGroupExecutor:
        Lambda: !GetAtt ClinicalVisualizerLambda.Arn
      FunctionSchema:
        Functions:
          - Name: create_pie_chart
            Description: Creates pie chart
            Parameters:
              data:
                Type: array
                Description: List of data points, each with label and value
                Required: false
              title:
                Type: string
                Description: Title of the pie chart
                Required: true

  # Bedrock Agent Action Group - Drug Information
  DrugInformationActionGroup:
    Type: AWS::Bedrock::AgentActionGroup
    DependsOn:
      - ClinicalStudySearchAgent
      - DrugInformationLambda
    Properties:
      AgentId: !Ref ClinicalStudySearchAgent
      ActionGroupName: drug-information-action-group
      ActionGroupState: ENABLED
      ActionGroupExecutor:
        Lambda: !GetAtt DrugInformationLambda.Arn
      FunctionSchema:
        Functions:
          - Name: get_approved_drugs
            Parameters:
              condition:
                Type: string
                Description: The disease or indication to filter approved drugs by (e.g., "diabetes", "hypertension").
                Required: true
              route:
                Type: string
                Description: Optional route of administration to narrow the search (e.g., "nasal", "oral", "intravenous").
                Required: false

  # Bedrock Agent Action Group - User Input
  UserInputActionGroup:
    Type: AWS::Bedrock::AgentActionGroup
    DependsOn:
      - ClinicalStudySearchAgent
    Properties:
      AgentId: !Ref ClinicalStudySearchAgent
      ActionGroupName: UserInputAction
      ActionGroupState: ENABLED
      ParentActionSignature: AMAZON.UserInput

  # Bedrock Agent Alias
  ClinicalStudySearchAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    DependsOn:
      - ClinicalStudySearchAgent
    Properties:
      AgentId: !Ref ClinicalStudySearchAgent
      AgentAliasName: latest
      Description: Latest version of the Clinical Study Search Agent
      RoutingConfiguration:
        - AgentVersion: DRAFT

Outputs:
  AgentId:
    Description: ID of the created Bedrock agent
    Value: !Ref ClinicalStudySearchAgent
  
  AgentAliasId:
    Description: ID of the created Bedrock agent alias
    Value: !Ref ClinicalStudySearchAgentAlias
  
  ClinicalStudySearchLambdaArn:
    Description: ARN of the Clinical Study Search Lambda function
    Value: !GetAtt ClinicalStudySearchLambda.Arn
  
  ClinicalVisualizerLambdaArn:
    Description: ARN of the Clinical Visualizer Lambda function
    Value: !GetAtt ClinicalVisualizerLambda.Arn
  
  DrugInformationLambdaArn:
    Description: ARN of the Drug Information Lambda function
    Value: !GetAtt DrugInformationLambda.Arn
  
  ChartImageBucketName:
    Description: Name of the S3 bucket for chart images
    Value: !Ref ChartImageBucket
