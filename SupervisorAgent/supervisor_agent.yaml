AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Bedrock Agent deployment using custom resource'

Parameters:
  # LayerBucket:
  #   Type: String
  #   Description: S3 bucket containing the Lambda layer zip file
  EnvironmentName:
    Type: String
    Description: The unique EnvironmentName for the application
    Default: env1

Resources:
  BedrockAgentRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAgentCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AmazonBedrockAgentBedrockFoundationModelPolicy
                Effect: Allow
                Action: bedrock:InvokeModel
                Resource:
                  - arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0
              - Sid: SupervisorAgentPolicy
                Effect: Allow
                Action:
                  - bedrock:GetAgentAlias
                  - bedrock:InvokeAgent
                  - bedrock:DeleteAgent
                Resource:
                  - arn:aws:bedrock:*:*:agent/*
                  - arn:aws:bedrock:*:*:agent-alias/*

  # LambdaLayer:
  #   Type: AWS::Lambda::LayerVersion
  #   Properties:
  #     CompatibleRuntimes:
  #       - python3.9
  #     Content:
  #       S3Bucket: !Ref LayerBucket
  #       S3Key: boto3-layer.zip
  #     Description: Layer containing boto3 and cfnresponse
  #     LayerName: BedrockAgentDependencies

  CollaboratorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAgentAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:CreateAgent
                  - bedrock:DeleteAgent
                Resource: '*'
              - Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt BedrockAgentRole.Arn

  BedrockAgentFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      # Layers:
      #   - !Ref LambdaLayer
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import uuid

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      client = boto3.client('bedrock-agent')
                      response = client.create_agent(
                          agentName='Supervisoragent',
                          agentResourceRoleArn=event['ResourceProperties']['RoleArn'],
                          description='Multi-agent collaboration for biomarker discovery',
                          foundationModel='anthropic.claude-3-5-sonnet-20241022-v2:0',
                          instruction='''You are a medical research assistant AI specialized in cancer biomarker analysis and discovery. Your primary task is to interpret user queries, use relevant agents for specific tasks, and provide consolidated medical insights based on the data. Use only the appropriate agents as required by the specific question. You can provide responses from a prior agent to the next agent in sequence. To analyze patient biomarkers data, you can retrieve relevant records from the database. To find the p-value of biomarkers, a. You need to query and store all records including survival status, survival duration in years, and the required biomarkers and b. You need to fit a surival regression model with that data in S3.  When providing your response: a. Start with a brief summary of your understanding of the user's query. b. Explain the steps you're taking to address the query. Ask for clarifications from the user if required. c. Present the results of individual agents d. Conclude with a concise summary of the findings and their potential implications for medical research. Make sure to explain any medical or statistical concepts in a clear, accessible manner.''',
                          idleSessionTTLInSeconds=1800,
                          agentCollaboration='SUPERVISOR',
                          memoryConfiguration={
                              'enabledMemoryTypes': ['SESSION_SUMMARY'],
                              'storageDays': 30
                          },
                          orchestrationType='DEFAULT',
                          clientToken=str(uuid.uuid4())
                      )
                      physical_id = response['agent']['agentId']
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                          {'AgentId': physical_id}, physical_id)
                  elif event['RequestType'] == 'Delete':
                      if 'PhysicalResourceId' in event:
                          client = boto3.client('bedrock-agent')
                          client.delete_agent(agentId=event['PhysicalResourceId'])
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, 
                      {'Error': str(e)})
      Timeout: 300

  BedrockAgentCustomResource:
    Type: Custom::BedrockAgent
    Properties:
      ServiceToken: !GetAtt BedrockAgentFunction.Arn
      RoleArn: !GetAtt BedrockAgentRole.Arn

  CollaboratorAssociationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt CollaboratorLambdaRole.Arn
      # Layers:
      #   - !Ref LambdaLayer
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      client = boto3.client('bedrock-agent')
                      supervisor_agent_id = event['ResourceProperties']['AgentId']

                      # Define sub-agents with their configurations
                      sub_agents = [
                          {
                              "sub_agent_association_name": "Medical-imaging-expert",
                              "sub_agent_instruction": "You are the medical imaging expert. Analyze and interpret medical images.",
                              "relay_conversation_history": "TO_COLLABORATOR"
                          },
                          {
                              "sub_agent_association_name": "Clinical-evidence-researcher",
                              "sub_agent_instruction": "You are the clinical evidence researcher. Review and analyze clinical evidence.",
                              "relay_conversation_history": "TO_COLLABORATOR"
                          },
                          {
                              "sub_agent_association_name": "Statistician",
                              "sub_agent_instruction": "You are the statistician. Provide statistical analysis and interpretation.",
                              "relay_conversation_history": "TO_COLLABORATOR"
                          },
                          {
                              "sub_agent_association_name": "Clinical-trial-analyst",
                              "sub_agent_instruction": "You are the clinical trial analyst. Analyze trial data and outcomes.",
                              "relay_conversation_history": "TO_COLLABORATOR"
                          }
                      ]

                      # Get all target agents to build alias ARNs
                      response = client.list_agents(maxResults=100)
                      agent_map = {}
                      
                      for agent in response['agentSummaries']:
                          if agent['agentName'] in [sa["sub_agent_association_name"] for sa in sub_agents]:
                              # Get existing alias
                              alias_response = client.list_agent_aliases(
                                  agentId=agent['agentId'],
                                  maxResults=1
                              )
                              alias_id = alias_response['agentAliasSummaries'][0]['agentAliasId']
                              
                              # Construct the alias ARN
                              alias_arn = f"arn:aws:bedrock:{context.invoked_function_arn.split(':')[3]}:{context.invoked_function_arn.split(':')[4]}:agent-alias/{agent['agentId']}/{alias_id}"
                              agent_map[agent['agentName']] = alias_arn

                      # Associate sub-agents
                      for sub_agent in sub_agents:
                          sub_agent["sub_agent_alias_arn"] = agent_map.get(sub_agent["sub_agent_association_name"])
                          
                          association_response = client.associate_agent_collaborator(
                              agentId=supervisor_agent_id,
                              agentVersion="DRAFT",
                              agentDescriptor={"aliasArn": sub_agent["sub_agent_alias_arn"]},
                              collaboratorName=sub_agent["sub_agent_association_name"],
                              collaborationInstruction=sub_agent["sub_agent_instruction"],
                              relayConversationHistory=sub_agent["relay_conversation_history"]
                          )
                          
                          time.sleep(20)  # Wait for agent status update
                          client.prepare_agent(agentId=supervisor_agent_id)
                          time.sleep(20)  # Wait for agent status update

                      # Create supervisor agent alias
                      supervisor_alias = client.create_agent_alias(
                          agentAliasName="multi-agent",
                          agentId=supervisor_agent_id
                      )

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                          {'SupervisorAliasId': supervisor_alias["agentAlias"]["agentAliasId"]})
                  
                  elif event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, 
                      {'Error': str(e)})

      Timeout: 300

  CollaboratorAssociationCustomResource:
    Type: Custom::CollaboratorAssociation
    DependsOn: BedrockAgentCustomResource
    Properties:
      ServiceToken: !GetAtt CollaboratorAssociationFunction.Arn
      AgentId: !GetAtt BedrockAgentCustomResource.AgentId
  
  AgentIdSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /streamlitapp/${EnvironmentName}/AGENT_ID
      Type: String
      Value: !GetAtt BedrockAgentCustomResource.AgentId
      Description: !Sub SSM parameter for AgentId for ${EnvironmentName}

  AgentAliasIdSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /streamlitapp/${EnvironmentName}/AGENT_ALIAS_ID
      Type: String
      Value: !GetAtt CollaboratorAssociationCustomResource.SupervisorAliasId
      Description: !Sub SSM parameter for AgentAliasId for ${EnvironmentName}

Outputs:
  AgentId:
    Description: Bedrock Agent ID
    Value: !GetAtt BedrockAgentCustomResource.AgentId
  SupervisorAliasId:
    Description: Supervisor Agent Alias ID
    Value: !GetAtt CollaboratorAssociationCustomResource.SupervisorAliasId